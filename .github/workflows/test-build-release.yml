name: Build, Test and Release

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    name: Build and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]
        include:
          - os: macos-latest
            cmake_generator: "Unix Makefiles"
            build_type: Release
            artifact_name: hello-macos

    steps:
    - uses: actions/checkout@v3

    - name: Install Required CMake Version
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y cmake
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          brew install cmake
        elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          choco install cmake --version 4.0.2
        fi

    - name: Create Build Environment
      run: |
        # Remove the existing build directory if it exists
        rm -rf ${{github.workspace}}/build
        # Create a fresh build directory
        cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake $GITHUB_WORKSPACE -G "${{ matrix.cmake_generator }}" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    # Should build binary first then run tests.
    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: ctest -C ${{ matrix.build_type }} --verbose --output-on-failure --rerun-failed

    - name: Package Executable
      shell: bash
      run: |
        mkdir -p ${{github.workspace}}/dist
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          cp ${{github.workspace}}/build/${{ matrix.build_type }}/hello_app.exe ${{github.workspace}}/dist/${{ matrix.artifact_name }}
        else
          cp ${{github.workspace}}/build/hello_app ${{github.workspace}}/dist/${{ matrix.artifact_name }}
        fi

    - name: Upload Build Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{github.workspace}}/dist/${{ matrix.artifact_name }}

  release:
    name: Create Release
    needs: build-and-test
    # Only run on tag push or main/master branch
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    
    steps:
    - name: Create Release Directory
      run: mkdir -p releases
      
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: releases
    
    - name: Display Structure
      run: ls -R releases

    - name: Create Release Name
      id: release_name
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "version=nightly-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.release_name.outputs.version }}
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || steps.release_name.outputs.version }}
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
        generate_release_notes: true
        files: releases/hello-macos/hello-macos
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
